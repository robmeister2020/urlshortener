package com.bobsurlshortener.urlshortener.database;

import java.sql.*;

/**
 * Data access object for the SQLite DB that holds the URLs
 */
public class UrlDatabaseDao {

    /**
        @param originalUrl - The URL submitted by the user
        @param shortenedUrl - The generated URL
        This method will persist both urls to the SQLIte3 DB
     */
    public static void persistUrl(String originalUrl, String shortenedUrl) {
        createUrlTableIfNotExists();
        persistUrls(originalUrl, shortenedUrl);
    }

    /**
     @param sourceUrl - The URL submitted by the user
     This method will check if the source URL has already been saved
     */
    public static boolean checkIfSourceUrlExists(String sourceUrl) {

        try (Connection conn = DriverManager.getConnection(DatabaseConstants.DATABASE_CONNECTION_STRING);
             PreparedStatement pStatement  = conn.prepareStatement(DatabaseConstants.GET_MATCHING_ENTRIES_SOURCE_URL)){

            if (conn != null) {
                pStatement.setString(1, sourceUrl);
                ResultSet rs  = pStatement.executeQuery();

                while (rs.next()) {
                    if(sourceUrl.equals(rs.getString(DatabaseConstants.ORIGINAL_URL_COLUMN))) {
                       return true;
                    }
                }
                return false;
            } else {
                return false;
            }


        } catch (SQLException e) {
            System.out.println(e.getMessage());
            return false;
        }
    }

    /**
     @param generatedUrl - The URL generated by the shortener
     This method will check if the shortened URL has already been saved
     */
    public static boolean checkIfGeneratedUrlExists(String generatedUrl) {

        try (Connection conn = DriverManager.getConnection(DatabaseConstants.DATABASE_CONNECTION_STRING);
             PreparedStatement pStatement = conn.prepareStatement(DatabaseConstants.GET_MATCHING_ENTRIES_GENERATED_URL)){

            if (conn != null) {
                pStatement.setString(1, generatedUrl);
                ResultSet rs  = pStatement.executeQuery();

                while (rs.next()) {
                    if(generatedUrl.equals(rs.getString(DatabaseConstants.SHORT_URL_COLUMN))) {
                        return true;
                    }
                }

                return false;
            } else {
                return false;
            }

        } catch (SQLException e) {
            System.out.println(e.getMessage());
            return false;
        }
    }

    /**
     @param originalUrl - The URL submitted by the user
     This method will return the shortened URL in the event that the user-submitted url has already been saved
     */
    public static String getExistingShortenedUrl(String originalUrl) {
        try (Connection conn = DriverManager.getConnection(DatabaseConstants.DATABASE_CONNECTION_STRING);
             PreparedStatement pStatement  = conn.prepareStatement(DatabaseConstants.GET_EXISTING_SHORTENED_URL)){
            ResultSet rs;

            if (conn != null) {
                pStatement.setString(1, originalUrl);
                rs  = pStatement.executeQuery();

                while (rs.next()) {
                    return rs.getString(DatabaseConstants.SHORT_URL_COLUMN);
                }
            } else {
                return "";
            }

        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
        return "";
    }

    /**
     @param shortenedUrl - The shortened URL previously created by the shortener
     This method will return the full URL using the shortened URL as a database key
     */
    public static String getFullUrl(String shortenedUrl) {
        try (Connection conn = DriverManager.getConnection(DatabaseConstants.DATABASE_CONNECTION_STRING);
             PreparedStatement pStatement  = conn.prepareStatement(DatabaseConstants.GET_ORIGINAL_URL_WITH_SHORT)){
            ResultSet rs;

            if (conn != null) {
                pStatement.setString(1, shortenedUrl);
                rs  = pStatement.executeQuery();

                while (rs.next()) {
                    return rs.getString(DatabaseConstants.ORIGINAL_URL_COLUMN);
                }
            } else {
                return "";
            }

        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
        return "";
    }

    /**
     This method will create the UrlMaps table in the event that it doesn't exist
     */
    private static void createUrlTableIfNotExists() {
        try (Connection conn = DriverManager.getConnection(DatabaseConstants.DATABASE_CONNECTION_STRING)) {
            if (conn != null) {
                Statement stmt = conn.createStatement();
                stmt.execute(DatabaseConstants.CREATE_DATABASE);
            }

        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
    }

    /**
     * @param originalUrl - the user-submitted URL to be persisted
     * @param shortenedUrl - the generated URL to be persisted
     This method will persist the original URL and the shortened URL
     */
    private static void persistUrls(String originalUrl, String shortenedUrl) {
        try (Connection conn = DriverManager.getConnection(DatabaseConstants.DATABASE_CONNECTION_STRING); PreparedStatement pStatement = conn.prepareStatement(DatabaseConstants.INSERT_ENTRY)) {
            if (conn != null) {
                pStatement.setString(1, originalUrl);
                pStatement.setString(2, shortenedUrl);
                pStatement.executeUpdate();
            }
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
    }

    private static class DatabaseConstants {
        final static String CREATE_DATABASE = "CREATE TABLE IF NOT EXISTS UrlMaps ( OriginalUrl text PRIMARY KEY, ShortUrl text NOT NULL );";
        final static String INSERT_ENTRY = "INSERT INTO UrlMaps (OriginalUrl, ShortUrl) VALUES (?, ?);";
        final static String GET_MATCHING_ENTRIES_SOURCE_URL = "SELECT OriginalUrl FROM UrlMaps WHERE OriginalUrl = ?";
        final static String GET_MATCHING_ENTRIES_GENERATED_URL = "SELECT ShortUrl FROM UrlMaps WHERE ShortUrl = ?";
        final static String GET_EXISTING_SHORTENED_URL = "SELECT ShortUrl FROM UrlMaps WHERE OriginalUrl = ?";
        final static String GET_ORIGINAL_URL_WITH_SHORT = "SELECT OriginalUrl FROM UrlMaps WHERE ShortUrl = ?";
        final static String DATABASE_CONNECTION_STRING = "jdbc:sqlite:/mnt/urlDB.db";
        final static String ORIGINAL_URL_COLUMN = "OriginalUrl";
        final static String SHORT_URL_COLUMN = "ShortUrl";
    }
}
